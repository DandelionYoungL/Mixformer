train-subtransformer: True

# model
arch: transformersuper_iwslt_de_en
data: data/binary/iwslt14_de_en
source-lang: de
target-lang: en
share-all-embeddings: True
share-decoder-input-output-embed: False
encoder-normalize-before: True
decoder-normalize-before: True
max-relative-length: 8

# training settings
seed: 1
optimizer: adam
adam-betas: (0.9, 0.98)
max-tokens: 4096
weight-decay: 0.0001
dropout: 0.3
relu-dropout: 0.1
attention-dropout: 0.1
num-workers: 2

fp16: True
criterion: label_smoothed_cross_entropy
label-smoothing: 0.1
clip-norm: 0.0
reset-optimizer: False
min-lr: 1e-09
max-epoch: 51
warmup-updates: 8000
lr-scheduler: inverse_sqrt
warmup-init-lr: 1e-7
lr: 0.0015

distributed-world-size: 1

# logging
keep-last-epochs: 10
save-interval: 1
#log-interval: 100
validate-interval: 1

# SuperTransformer configs

# We train the SubTransformer inside the SuperTransformer, so need to specify a SuperTransformer
# From algorithm side, we can train a totally standalone SubTransformer and it is unnecessary to specify a SuperTransformer
# However, from implementation side, it is easier to do a Subtransformer training by always sampling the same desired SubTransformer from a specified SuperTransformer

encoder-embed-dim: 640
decoder-embed-dim: 640

encoder-ffn-embed-dim: 2048
decoder-ffn-embed-dim: 2048

encoder-layers: 6
decoder-layers: 6

encoder-attention-heads: 8
decoder-attention-heads: 8

qkv-dim: 512
